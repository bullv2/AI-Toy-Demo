import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  Animated,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';

const TIPS = [
  {
    title: 'üèÉ ‰øùÊåÅÊ¥ªÂäõ',
    description: 'ËÆ©Ë∫´‰ΩìÂä®Ëµ∑Êù•ÔºåËÆ©ÊÄùÁª¥Êõ¥ÊïèÊç∑',
    bullets: [
      'Âà∞Êà∑Â§ñÊï£Ê≠•10ÂàÜÈíü',
      'ÂÅö‰∏Ä‰∫õËΩªÂ∫¶Êãâ‰º∏',
      'Â∞ùËØïÊñ∞ÁöÑËøêÂä®ÊñπÂºè',
      'ÈöèÁùÄÂñúÊ¨¢ÁöÑÈü≥‰πêË∑≥Ëàû',
    ],
    color: '#FF6B6B',
  },
  {
    title: 'üìö Â≠¶‰π†Êñ∞Áü•ËØÜ',
    description: 'ÊØèÂ§©Êâ©Â±ï‰Ω†ÁöÑÁü•ËØÜÈù¢',
    bullets: [
      'ÈòÖËØª15ÂàÜÈíü‰π¶Á±ç',
      'ËßÇÁúãÊïôËÇ≤ËßÜÈ¢ë',
      'Â∞ùËØïÊñ∞ÁöÑÂÖ¥Ë∂£Áà±Â•Ω',
      'Â≠¶‰π†‰∏ÄÈó®Êñ∞ËØ≠Ë®Ä',
    ],
    color: '#4ECDC4',
  },
  {
    title: 'üë• ‰∏é‰ªñ‰∫∫‰∫§ÊµÅ',
    description: 'Âª∫Á´ãÊúâÊÑè‰πâÁöÑ‰∫∫ÈôÖÂÖ≥Á≥ª',
    bullets: [
      'ÁªôÊúãÂèãÊàñÂÆ∂‰∫∫ÊâìÁîµËØù',
      'Âä†ÂÖ•Á§æÂå∫Âõ¢‰Ωì',
      '‰∏é‰ªñ‰∫∫ÂàÜ‰∫´‰Ω†ÁöÑÊÉ≥Ê≥ï',
      'Â∏ÆÂä©ÊúâÈúÄË¶ÅÁöÑ‰∫∫',
    ],
    color: '#45B7D1',
  },
  {
    title: 'üßò ÁªÉ‰π†Ê≠£Âøµ',
    description: 'ÂÖ≥Ê≥®‰Ω†ÁöÑÂøÉÁêÜÂÅ•Â∫∑',
    bullets: [
      'ÂÜ•ÊÉ≥5ÂàÜÈíü',
      'ÁªÉ‰π†Ê∑±ÂëºÂê∏',
      'ÂÜôÊó•ËÆ∞',
      'Ëä±Êó∂Èó¥‰∫≤ËøëÂ§ßËá™ÁÑ∂',
    ],
    color: '#96CEB4',
  },
  {
    title: 'üìù ‰øùÊåÅÊù°ÁêÜ',
    description: 'ËÆ©ÁîüÊ¥ª‰∫ïÁÑ∂ÊúâÂ∫è',
    bullets: [
      'Âà∂ÂÆöÂæÖÂäû‰∫ãÈ°πÊ∏ÖÂçï',
      'Êï¥ÁêÜÂ∑•‰ΩúÁ©∫Èó¥',
      'ÊèêÂâçËßÑÂàí‰∏ÄÂë®',
      'ËÆæÂÆöÂèØÂÆûÁé∞ÁöÑÁõÆÊ†á',
    ],
    color: '#FFEEAD',
  },
  {
    title: 'üé® ÂüπÂÖªÂàõÈÄ†Âäõ',
    description: 'ÊøÄÂèë‰Ω†ÁöÑËâ∫ÊúØÊΩúËÉΩ',
    bullets: [
      'Â∞ùËØïÁªòÁîªÊàñÊ∂ÇÈ∏¶',
      'ÂÜô‰∏ÄÈ¶ñËØóÊàñÁü≠ÁØáÊïÖ‰∫ã',
      'Â≠¶‰π†‰∏ÄÁßç‰πêÂô®',
      'Â∞ùËØïÊëÑÂΩ±ÊàñËßÜÈ¢ëÂà∂‰Ωú',
    ],
    color: '#D4A5A5',
  },
  {
    title: 'ü•ó ÂÅ•Â∫∑È•ÆÈ£ü',
    description: 'ÂÖ≥Ê≥®‰Ω†ÁöÑËê•ÂÖªÊëÑÂÖ•',
    bullets: [
      'Â∞ùËØïÊñ∞ÁöÑÂÅ•Â∫∑È£üË∞±',
      'Â§öÂêÉÊñ∞È≤úÊ∞¥ÊûúÂíåËî¨Ëèú',
      '‰øùÊåÅÂÖÖË∂≥ÁöÑÊ∞¥ÂàÜÊëÑÂÖ•',
      'Ê≥®ÊÑèÈ•ÆÈ£üÁöÑÂ§öÊ†∑ÊÄß',
    ],
    color: '#9B59B6',
  },
  {
    title: 'üì± Êï∞Â≠óÂÅ•Â∫∑',
    description: 'ÂêàÁêÜ‰ΩøÁî®ÁßëÊäÄ‰∫ßÂìÅ',
    bullets: [
      'ËÆæÁΩÆÂ±èÂπï‰ΩøÁî®Êó∂Èó¥ÈôêÂà∂',
      'ÂÆöÊúüÊï¥ÁêÜÊâãÊú∫ÁÖßÁâá',
      'Ê∏ÖÁêÜ‰∏çÂøÖË¶ÅÁöÑÂ∫îÁî®',
      'Â∞ùËØïÊï∞Â≠óÊéíÊØí',
    ],
    color: '#3498DB',
  },
  {
    title: 'üå± ÁéØ‰øùÁîüÊ¥ª',
    description: '‰∏∫Âú∞ÁêÉÂÅöÂá∫Ë¥°ÁåÆ',
    bullets: [
      'ÂáèÂ∞ë‰∏ÄÊ¨°ÊÄßÁî®ÂìÅ‰ΩøÁî®',
      'Â∞ùËØïÂûÉÂúæÂàÜÁ±ª',
      'ËäÇÁ∫¶Áî®Ê∞¥Áî®Áîµ',
      'ÈÄâÊã©ÁéØ‰øùÂá∫Ë°åÊñπÂºè',
    ],
    color: '#2ECC71',
  },
  {
    title: 'üôè ÊÑüÊÅ©ÁªÉ‰π†',
    description: 'ÂüπÂÖªÁßØÊûÅÂøÉÊÄÅ',
    bullets: [
      'ËÆ∞ÂΩï‰∏â‰ª∂ÊÑüÊÅ©ÁöÑ‰∫ã',
      'Âêë‰ªñ‰∫∫Ë°®ËææÊÑüË∞¢',
      'ÂÖ≥Ê≥®ÁîüÊ¥ª‰∏≠ÁöÑÂ∞èÁ°ÆÂπ∏',
      'ÂàÜ‰∫´‰Ω†ÁöÑÊÑüÊÅ©ÊïÖ‰∫ã',
    ],
    color: '#F1C40F',
  },
];

const TipsPage = () => {
  const [currentTips, setCurrentTips] = useState<number[]>([0, 1, 2]);
  const [expandedTip, setExpandedTip] = useState<number | null>(null);
  const fadeAnims = useState([
    new Animated.Value(1),
    new Animated.Value(1),
    new Animated.Value(1),
  ])[0];
  const currentTipsRef = useRef<number[]>(currentTips);
  const swapIndexRef = useRef(0);
  const usedTipsRef = useRef<Set<number>>(new Set([0, 1, 2]));

  useEffect(() => {
    currentTipsRef.current = currentTips;
  }, [currentTips]);

  const getNextUniqueTip = (currentTips: number[]): number => {
    const usedTips = new Set([...currentTips, ...Array.from(usedTipsRef.current)]);
    const availableTips = Array.from({ length: TIPS.length }, (_, i) => i)
      .filter(i => !usedTips.has(i));
    
    if (availableTips.length === 0) {
      // If all tips have been used, reset the used tips set
      usedTipsRef.current = new Set(currentTips);
      return (Math.max(...currentTips) + 1) % TIPS.length;
    }
    
    return availableTips[Math.floor(Math.random() * availableTips.length)];
  };

  useEffect(() => {
    const interval = setInterval(() => {
      const currentIndex = swapIndexRef.current;
      
      // Fade out the current tip
      Animated.timing(fadeAnims[currentIndex], {
        toValue: 0,
        duration: 500,
        useNativeDriver: true,
      }).start(() => {
        // Update the tip after fade out
        const newTips = [...currentTipsRef.current];
        const nextTip = getNextUniqueTip(newTips);
        newTips[currentIndex] = nextTip;
        usedTipsRef.current.add(nextTip);
        setCurrentTips(newTips);

        // Fade in the new tip
        Animated.timing(fadeAnims[currentIndex], {
          toValue: 1,
          duration: 500,
          useNativeDriver: true,
        }).start();
      });

      // Move to the next tip for the next swap
      swapIndexRef.current = (currentIndex + 1) % 3;
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const toggleExpand = (index: number) => {
    setExpandedTip(expandedTip === index ? null : index);
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>‚ú® ‰Ω†ÁöÑAIÊúãÂèãÊèêÈÜí‰Ω†Ë¶Å...</Text>
      
      <View style={styles.tipsContainer}>
        {currentTips.map((tipIndex, index) => (
          <Animated.View
            key={index}
            style={[
              styles.tipCard,
              { 
                opacity: fadeAnims[index],
                backgroundColor: TIPS[tipIndex].color + '20',
                borderLeftColor: TIPS[tipIndex].color,
              }
            ]}
          >
            <TouchableOpacity onPress={() => toggleExpand(index)}>
              <View style={styles.tipHeader}>
                <Text style={[styles.tipTitle, { color: TIPS[tipIndex].color }]}>
                  {TIPS[tipIndex].title}
                </Text>
                <Ionicons
                  name={expandedTip === index ? 'chevron-up' : 'chevron-down'}
                  size={24}
                  color={TIPS[tipIndex].color}
                />
              </View>
              <Text style={styles.tipDescription}>{TIPS[tipIndex].description}</Text>
              
              {expandedTip === index && (
                <View style={styles.bulletsContainer}>
                  {TIPS[tipIndex].bullets.map((bullet, bulletIndex) => (
                    <View key={bulletIndex} style={styles.bulletItem}>
                      <Ionicons 
                        name="ellipse" 
                        size={8} 
                        color={TIPS[tipIndex].color} 
                        style={styles.bulletIcon} 
                      />
                      <Text style={styles.bulletText}>{bullet}</Text>
                    </View>
                  ))}
                </View>
              )}
            </TouchableOpacity>
          </Animated.View>
        ))}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
    padding: 20,
    paddingTop: Platform.OS === 'ios' ? 60 : 20,
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 20,
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.1)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  tipsContainer: {
    flex: 1,
  },
  tipCard: {
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    borderLeftWidth: 4,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  tipHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  tipTitle: {
    fontSize: 20,
    fontWeight: '600',
  },
  tipDescription: {
    fontSize: 15,
    color: '#666',
    marginBottom: 8,
    lineHeight: 22,
  },
  bulletsContainer: {
    marginTop: 8,
    paddingLeft: 8,
  },
  bulletItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
  },
  bulletIcon: {
    marginRight: 8,
  },
  bulletText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
  },
});

export default TipsPage; 